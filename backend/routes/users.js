const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');
const auth = require('../middleware/auth');
const config = require('../config/config');
const validator = require('validator');

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.post('/register', async (req, res) => {
    try {
        const { name, email, password } = req.body;
        console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', { name, email });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        if (!name || name.length < 2) {
            return res.status(400).json({ 
                message: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞' 
            });
        }

        if (name.length > 50) {
            return res.status(400).json({ 
                message: '–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤' 
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if (!validator.isEmail(email)) {
            return res.status(400).json({ 
                message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å' 
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
        if (!password || password.length < 8) {
            return res.status(400).json({ 
                message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤' 
            });
        }

        if (!/^(?=.*[A-Z])(?=.*\d).{8,}$/.test(password)) {
            return res.status(400).json({ 
                message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = await User.findOne({ email: email.toLowerCase() });
        if (existingUser) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', email);
            return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = new User({
            name,
            email: email.toLowerCase(),
            password
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        const savedUser = await user.save();
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', {
            id: savedUser._id,
            name: savedUser.name,
            email: savedUser.email
        });

        res.status(201).json({
            message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
            user: {
                id: savedUser._id,
                name: savedUser.name,
                email: savedUser.email
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
    }
});

// –õ–æ–≥–∏–Ω —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
router.post('/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        console.log('üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { email });

        if (!email || !password) {
            return res.status(400).json({ 
                message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
            });
        }

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findOne({ email: email.toLowerCase() });
        console.log('üë§ –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user ? {
            id: user._id,
            email: user.email,
            passwordHash: user.password.substring(0, 10) + '...'
        } : '–Ω–µ –Ω–∞–π–¥–µ–Ω');

        if (!user) {
            return res.status(401).json({ 
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isMatch = await bcrypt.compare(password, user.password);
        console.log('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è:', {
            –≤–≤–µ–¥–µ–Ω–Ω—ã–π–ü–∞—Ä–æ–ª—å: password,
            —Ä–µ–∑—É–ª—å—Ç–∞—Ç: isMatch ? '–≤–µ—Ä–Ω—ã–π' : '–Ω–µ–≤–µ—Ä–Ω—ã–π'
        });

        if (!isMatch) {
            return res.status(401).json({ 
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
            });
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        const token = jwt.sign(
            { userId: user._id },
            'your-secret-key',
            { expiresIn: '24h' }
        );

        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', {
            userId: user._id,
            email: user.email
        });

        res.json({
            token,
            user: {
                id: user._id,
                name: user.name,
                email: user.email
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({ 
            message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' 
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/profile', auth, async (req, res) => {
    try {
        const user = await User.findById(req.user.userId).select('-password');
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }
        res.json(user);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching profile' });
    }
});

module.exports = router;
